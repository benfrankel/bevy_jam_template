name: Release

on:
  # Trigger this workflow when a tag is pushed in the format `v1.2.3`.
  push:
    tags:
      # Pattern syntax: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - "v[0-9]+.[0-9]+.[0-9]+*"
  # Trigger this workflow manually via workflow dispatch.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number in the format `v1.2.3`'
        required: true
        type: string

# Configure constants for this workflow.
env:
  # TODO: This may become unnecessary: https://github.com/rust-lang/cargo/issues/6790
  # The base filename of the binary produced by `cargo build`.
  BINARY: run
  # The name to use for the packaged application produced by this workflow.
  PACKAGE_NAME: bevy_jam_template
  # The itch.io page to upload to in the format `user-name/project-name`.
  # Comment this out to disable.
  ITCH_TARGET: pyrious/bevy-jam-template
  # The organization or author that owns the rights to the game.
  OWNER: Pyrious
  # The path to the assets directory.
  ASSETS_DIR: assets
  # Whether packages produced by this workflow should be uploaded to the Github release.
  UPLOAD_PACKAGES_TO_GITHUB_RELEASE: true
  # Before enabling LFS, please take a look at GitHub's documentation for costs and quota limits:
  # https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-storage-and-bandwidth-usage
  USE_GIT_LFS: false

jobs:
  # Extract the version number from the pushed tag.
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Get version number from tag
        id: tag
        run: |
          echo "tag=${GITHUB_REF#refs/tags/}" >> "${GITHUB_OUTPUT}"
    outputs:
      version: ${{ inputs.version || steps.tag.outputs.tag }}

  # Build a binary for each target.
  build:
    strategy:
      matrix:
        include:
          # Web:
          - platform: web
            target: wasm32-unknown-unknown
            profile: wasm-release
            features: web
            binary_ext: .wasm
          # Linux:
          - platform: linux
            target: x86_64-unknown-linux-gnu
            profile: release
            features: native,bevy/wayland
          # Windows:
          - platform: windows
            target: x86_64-pc-windows-msvc
            profile: release
            features: native
            runner: windows-latest
            binary_ext: .exe
          # MacOS x86_64:
          - platform: macos
            target: x86_64-apple-darwin
            profile: release
            features: native
            runner: macos-latest
          # MacOS Apple Silicon:
          - platform: macos
            target: aarch64-apple-darwin
            profile: release
            features: native
            runner: macos-latest
    runs-on: ${{ matrix.runner || 'ubuntu-latest' }}

    steps:
      - name: Set up environment (MacOS)
        if: ${{ matrix.platform == 'macos' }}
        run: |
          echo 'MACOSX_DEPLOYMENT_TARGET=11.0' >> "${GITHUB_ENV}" # MacOS 11.0 Big Sur is the first version to support universal binaries.
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> "${GITHUB_ENV}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: ${{ env.USE_GIT_LFS }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Linux)
        if: ${{ matrix.platform == 'linux' }}
        run: |
          sudo apt-get update; sudo apt-get install libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev

      - name: Populate target directory from cache
        uses: Leafwing-Studios/cargo-cache@v1

      - name: Build binary
        run: |
          cargo build --profile='${{ matrix.profile }}' --target='${{ matrix.target }}' --no-default-features --features='${{ matrix.features }}'
          mkdir -p tmp
          mv 'target/${{ matrix.target }}/${{ matrix.profile }}/${{ env.BINARY }}${{ matrix.binary_ext }}' 'tmp/${{ env.PACKAGE_NAME }}${{ matrix.binary_ext }}'

      - name: Install cargo-binstall (Web)
        if: ${{ matrix.platform == 'web' }}
        uses: cargo-bins/cargo-binstall@v1.7.4

      - name: Run wasm-bindgen (Web)
        if: ${{ matrix.platform == 'web' }}
        run: |
          cargo binstall --no-confirm wasm-bindgen-cli
          wasm-bindgen tmp/* --out-dir tmp --out-name '${{ env.PACKAGE_NAME }}' --no-typescript --target web
          rm 'tmp/${{ env.PACKAGE_NAME }}${{ matrix.binary_ext }}'

      - name: Optimize Wasm (Web)
        if: ${{ matrix.platform == 'web' }}
        uses: NiklasEi/wasm-opt-action@v2
        with:
          file: tmp/*${{ matrix.binary_ext }}

      - name: Upload binary to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: tmp/*
          name: binary-${{ matrix.platform }}-${{ matrix.target }}
          retention-days: 1

  # Package a release for each platform.
  package:
    needs:
      - get-version
      - build
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
    strategy:
      matrix:
        include:
          # Web:
          - platform: web
            package_ext: .zip
            binary_ext: .wasm
          # Linux:
          - platform: linux
            package_ext: .zip
          # Windows:
          - platform: windows
            package_ext: .zip
            binary_ext: .exe
          # MacOS:
          - platform: macos
            package_ext: .dmg
            out_dir_suffix: .app/Contents/MacOS
            runner: macos-latest # Already has `lipo` and `hdiutil` installed.
    runs-on: ${{ matrix.runner || 'ubuntu-latest' }}

    steps:
      - name: Set up environment
        run: |
          echo 'PACKAGE=${{ env.PACKAGE_NAME }}-${{ matrix.platform }}' >> "${GITHUB_ENV}"
          echo 'OUT_DIR=tmp/package/${{ env.PACKAGE_NAME }}${{ matrix.out_dir_suffix }}' >> "${GITHUB_ENV}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: ${{ env.USE_GIT_LFS }}

      - name: Create output directory
        run: |
          rm -rf '${{ env.OUT_DIR }}'
          mkdir -p '${{ env.OUT_DIR }}'

      - name: Download binary from artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binary-${{ matrix.platform }}-*
          path: tmp

      # TODO: Workaround for https://github.com/actions/upload-artifact/issues/38.
      - name: Fix file permissions of binary (non-Web)
        if: ${{ matrix.platform != 'web' }}
        run: |
          chmod +x tmp/binary-*/*${{ matrix.binary_ext }}

      - name: Add binary to package (non-MacOS)
        if: ${{ matrix.platform != 'macos' }}
        run: |
          mv tmp/binary-*/* '${{ env.OUT_DIR }}'

      - name: Create universal binary (MacOS)
        if: ${{ matrix.platform == 'macos' }}
        run: |
          lipo tmp/binary-*/* -create -output '${{ env.OUT_DIR }}/${{ env.PACKAGE_NAME }}${{ matrix.binary_ext }}'

      - name: Add assets to package
        run: |
          cp -r '${{ env.ASSETS_DIR }}' '${{ env.OUT_DIR }}' || true # Ignore error if assets folder does not exist

      - name: Add web content to package (Web)
        if: ${{ matrix.platform == 'web' }}
        run: |
          cp -r web/* '${{ env.OUT_DIR }}'

      - name: Add app metadata to package (MacOS)
        if: ${{ matrix.platform == 'macos' }}
        run: |
          cat > '${{ env.OUT_DIR }}/../Info.plist' << EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
                <dict>
                    <key>CFBundleDevelopmentRegion</key>
                    <string>en</string>
                    <key>CFBundleDisplayName</key>
                    <string>${{ env.PACKAGE_NAME }}</string>
                    <key>CFBundleExecutable</key>
                    <string>${{ env.PACKAGE_NAME }}</string>
                    <key>CFBundleIdentifier</key>
                    <string>${{ env.OWNER }}.${{ env.PACKAGE_NAME }}</string>
                    <key>CFBundleName</key>
                    <string>${{ env.PACKAGE_NAME }}</string>
                    <key>CFBundleShortVersionString</key>
                    <string>${{ env.VERSION }}</string>
                    <key>CFBundleVersion</key>
                    <string>${{ env.VERSION }}</string>
                    <key>CFBundleInfoDictionaryVersion</key>
                    <string>6.0</string>
                    <key>CFBundlePackageType</key>
                    <string>APPL</string>
                    <key>CFBundleSupportedPlatforms</key>
                    <array>
                        <string>MacOSX</string>
                    </array>
                </dict>
            </plist>
          EOF

      - name: Build package (non-MacOS)
        if: ${{ matrix.platform != 'macos' }}
        working-directory: tmp/package
        run: |
          zip --recurse-paths '${{ env.PACKAGE }}${{ matrix.package_ext }}' '${{ env.PACKAGE_NAME }}'

      - name: Build package (MacOS)
        if: ${{ matrix.platform == 'macos' }}
        working-directory: tmp/package
        run: |
          ln -s /Applications .
          hdiutil create -fs HFS+ -volname '${{ env.PACKAGE_NAME }}' -srcfolder . '${{ env.PACKAGE }}${{ matrix.package_ext }}'

      - name: Upload package to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: tmp/package/${{ env.PACKAGE }}${{ matrix.package_ext }}
          name: package-${{ matrix.platform }}
          retention-days: 1

      - name: Upload package to Github release
        if: ${{ env.UPLOAD_PACKAGES_TO_GITHUB_RELEASE == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tmp/package/${{ env.PACKAGE }}${{ matrix.package_ext }}
          asset_name: ${{ env.PACKAGE }}${{ matrix.package_ext }}
          release_name: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          overwrite: true

  # Get itch.io target from env, because the `env` context can't be used in the `if:` condition of a job.
  # See: https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
  get-itch-target:
    runs-on: ubuntu-latest
    steps:
      - name: No-op
        run: true
    outputs:
      itch-target: ${{ env.ITCH_TARGET }}

  # Upload all packages to itch.io.
  upload-to-itch:
    runs-on: ubuntu-latest
    needs:
      - get-version
      - get-itch-target
      - package
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
    if: ${{ needs.get-itch-target.outputs.itch-target != '' }}

    steps:
      - name: Download all packages
        uses: actions/download-artifact@v4
        with:
          pattern: package-*
          path: tmp

      - name: Install butler
        run: |
          curl -L -o butler.zip 'https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default'
          unzip butler.zip
          chmod +x butler
          ./butler -V

      - name: Upload all packages to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          for channel in $(ls tmp); do
            ./butler push \
              --fix-permissions \
              --userversion='${{ env.VERSION }}' \
              tmp/"${channel}"/* \
              '${{ env.ITCH_TARGET }}':"${channel#package-}"
          done
