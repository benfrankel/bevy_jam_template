{
    "Function Plugin": {
        "scope": "rust",
        "prefix": "plugin_fn",
        "body": [
            "use bevy::prelude::*;",
            "",
            "use crate::util::prelude::*;",
            "",
            "pub(super) fn plugin(app: &mut App) {",
            "    $0",
            "}"
        ],
        "description": "Define a new module-level function Plugin"
    },
    "Component": {
        "scope": "rust",
        "prefix": "component",
        "body": [
            "#[derive(Component, Reflect)]",
            "#[reflect(Component)]",
            "struct $1;",
            "",
            "impl Configure for $1 {",
            "    fn configure(app: &mut App) {",
            "        app.register_type::<Self>();$0",
            "    }",
            "}"
        ],
        "description": "Define a new Component"
    },
    "Resource": {
        "scope": "rust",
        "prefix": "resource",
        "body": [
            "#[derive(Resource, Reflect, Default)]",
            "#[reflect(Resource)]",
            "struct $1;",
            "",
            "impl Configure for $1 {",
            "    fn configure(app: &mut App) {",
            "        app.register_type::<Self>();",
            "        app.init_resource::<Self>();$0",
            "    }",
            "}"
        ],
        "description": "Define a new Resource"
    },
    "EntityCommand": {
        "scope": "rust",
        "prefix": "entity",
        "body": [
            "struct $1;",
            "",
            "impl EntityCommand for $1 {",
            "    fn apply(self, id: Entity, world: &mut World) {",
            "        world.entity_mut(id).insert((",
            "            Name::new(\"$1\"),",
            "            $0",
            "        ));",
            "    }",
            "}"
        ],
        "description": "Define a new EntityCommand"
    },
    "Function EntityCommand": {
        "scope": "rust",
        "prefix": "entity_fn",
        "body": [
            "fn $1(entity: Entity, world: &mut World) {",
            "    world.entity_mut(entity).insert((",
            "        Name::new(\"$1\"),",
            "        $0",
            "    ));",
            "}"
        ],
        "description": "Define a new function EntityCommand"
    },
    "Event": {
        "scope": "rust",
        "prefix": "event",
        "body": [
            "#[derive(Event)]",
            "struct $1;",
            "",
            "impl Configure for $1 {",
            "    fn configure(app: &mut App) {",
            "        app.add_event::<Self>();$0",
            "    }",
            "}"
        ],
        "description": "Define a new buffered Event"
    },
    "SystemSet": {
        "scope": "rust",
        "prefix": "system_set",
        "body": [
            "#[derive(SystemSet, Copy, Clone, Eq, PartialEq, Hash, Debug)]",
            "enum $1 {",
            "    $2",
            "}",
            "",
            "impl Configure for $1 {",
            "    fn configure(app: &mut App) {",
            "        app.configure_sets($3, $0);",
            "    }",
            "}"
        ],
        "description": "Define a new SystemSet"
    },
    "Schedule": {
        "scope": "rust",
        "prefix": "schedule",
        "body": [
            "#[derive(ScheduleLabel, Copy, Clone, Eq, PartialEq, Hash, Debug)]",
            "struct $0"
        ],
        "description": "Define a new Schedule"
    },
    "State": {
        "scope": "rust",
        "prefix": "state",
        "body": [
            "#[derive(State, Copy, Clone, Eq, PartialEq, Reflect, Default)]",
            "#[state(log_flush)]",
            "#[reflect(Resource)]",
            "enum $1 {",
            "    #[default]",
            "    $2",
            "}",
            "",
            "impl Configure for $1 {",
            "    fn configure(app: &mut App) {",
            "        app.register_type::<Self>();",
            "        app.init_state::<Self>();$0",
            "}"
        ],
        "description": "Define a new State"
    },
    "Actionlike": {
        "scope": "rust",
        "prefix": "actionlike",
        "body": [
            "#[derive(Actionlike, Copy, Clone, Eq, PartialEq, Reflect)]",
            "enum $1 {",
            "    $2",
            "}",
            "",
            "impl Configure for $1 {",
            "    fn configure(app: &mut App) {",
            "        app.init_resource::<ActionState<Self>>();",
            "        app.insert_resource(InputMap::default()",
            "            .insert($0)",
            "            .build(),",
            "        );",
            "        app.add_plugins(InputManagerPlugin::<Self>::default());",
            "        app.add_systems(",
            "            Update,",
            "            (",
            "                .in_set(UpdateSet::RecordInput).run_if(action_just_pressed()),",
            "            ),",
            "        );",
            "    }",
            "}"
        ],
        "description": "Define a new Actionlike"
    },
    "Config": {
        "scope": "rust",
        "prefix": "config",
        "body": [
            "#[derive(Asset, Reflect, Serialize, Deserialize, Default)]",
            "#[serde(deny_unknown_fields, default)]",
            "struct $1;",
            "",
            "impl Config for $1 {",
            "    const PATH: &str = \"config/$2.ron\";",
            "    const EXTENSION: &str = \"$2.ron\";$0",
            "}"
        ],
        "description": "Define a new Config"
    }
}
